Project Overview: Melee Characters App

This is a full-stack web application that manages Super Smash Bros. Melee character data. Let me break down the entire project structure and architecture for you.

🎯 What This Project Does

The application is a character management system for Super Smash Bros. Melee fighters, allowing users to:
- View a list of all characters
- See detailed information about each character
- Add new characters to the database
- Edit existing character information
- Delete characters from the database

🏗️ Architecture Overview

This is a 3-tier architecture with:
1. Frontend: Angular SPA (Single Page Application)
2. Backend: Node.js/Express REST API
3. Database: MongoDB (NoSQL document database)

┌─────────────────┐    HTTP/REST    ┌─────────────────┐    MongoDB     ┌─────────────────┐
│   Angular App   │ ◄─────────────► │  Node.js API    │ ◄─────────────► │   MongoDB       │
│   (Frontend)    │                 │   (Backend)     │                 │   (Database)    │
│   Netlify       │                 │   Render        │                 │   Atlas         │
└─────────────────┘                 └─────────────────┘                 └─────────────────┘

📁 Project Structure

u08-angular-frontend-gabrielkereklidispaulin/
├── angular-frontend/           # Angular frontend application
│   ├── src/
│   │   ├── app/
│   │   │   ├── components/     # Reusable UI components
│   │   │   │   ├── character-list/     # Character listing component
│   │   │   │   └── character-detail/   # Character detail view component
│   │   │   ├── models/         # TypeScript interfaces
│   │   │   │   └── character.interface.ts
│   │   │   ├── services/       # Business logic & API calls
│   │   │   │   └── character.service.ts
│   │   │   ├── app.component.* # Main app component
│   │   │   ├── app.routes.ts   # Routing configuration
│   │   │   └── app.config.ts   # App configuration
│   │   ├── index.html          # Main HTML template
│   │   └── main.ts             # Application entry point
│   ├── package.json            # Frontend dependencies
│   └── angular.json            # Angular CLI configuration
├── u05/                        # Node.js backend application
│   ├── src/
│   │   ├── controllers/        # Request handlers
│   │   │   └── characterController.js
│   │   ├── models/             # Database schemas
│   │   │   └── Character.js
│   │   ├── routes/             # API endpoints
│   │   │   └── characterRoutes.js
│   │   └── server.js           # Express server setup
│   ├── package.json            # Backend dependencies
│   └── .env                    # Environment variables (MongoDB URI)
├── netlify.toml               # Netlify deployment configuration
└── README.md

🎨 Frontend (Angular) - Detailed Breakdown

Technology Stack:
- Angular 18: Modern TypeScript framework
- Angular CLI: Build and development tools
- Angular Router: Client-side routing
- Angular HTTP Client: API communication
- RxJS: Reactive programming for data streams

Key Components:

1. Character Interface (character.interface.ts)
export interface Character {
  _id?: string;                    // MongoDB document ID
  name: string;                    // Character name
  weight_class: 'light' | 'medium' | 'heavy';
  movement_speed: number;          // Speed rating
  original_game_series: string;    // Source game
  icon?: string;                   // Icon URL
  image?: string;                  // Image URL
  model?: string;                  // 3D model URL
  tier_ranking: 'S' | 'A' | 'B' | 'C' | 'D';
  notable_players: string[];       // Array of player names
}

2. Character Service (character.service.ts)
- Purpose: Handles all API communication
- Features:
  - HTTP requests to backend API
  - Reactive data management with RxJS
  - Caching with BehaviorSubject
  - CRUD operations (Create, Read, Update, Delete)

3. Character List Component
- Purpose: Displays all characters in a list
- Features:
  - Fetches and displays character data
  - Navigation to character details
  - Delete functionality

4. Character Detail Component
- Purpose: Shows detailed information about a single character
- Features:
  - Displays all character properties
  - Edit functionality
  - Form validation

Routing Configuration:
// app.routes.ts
export const routes: Routes = [
  { path: '', component: CharacterListComponent },
  { path: 'character/:id', component: CharacterDetailComponent }
];

⚙️ Backend (Node.js/Express) - Detailed Breakdown

Technology Stack:
- Node.js: JavaScript runtime
- Express.js: Web framework
- Mongoose: MongoDB object modeling
- CORS: Cross-origin resource sharing
- dotenv: Environment variable management

Key Components:

1. Server Setup (server.js)
// Express server configuration
const app = express();
app.use(cors());                    // Enable CORS
app.use(express.json());           // Parse JSON bodies
mongoose.connect(process.env.MONGO_URI); // Connect to MongoDB
app.use("/characters", characterRoutes); // Mount routes

2. Character Model (Character.js)
const CharacterSchema = new mongoose.Schema({
  name: { type: String, required: true },
  weight_class: { 
    type: String, 
    enum: ["light", "medium", "heavy"], 
    required: true 
  },
  movement_speed: { type: Number, required: true },
  // ... other fields
});

3. Character Controller (characterController.js)
- Purpose: Handles HTTP requests and business logic
- Endpoints:
  - GET /characters - Get all characters
  - GET /characters/:id - Get character by ID
  - POST /characters - Create new character
  - PUT /characters/:id - Update character
  - DELETE /characters/:id - Delete character

4. Character Routes (characterRoutes.js)
- Purpose: Defines API endpoints
- Features:
  - RESTful routing
  - Controller method mapping

🗄️ Database (MongoDB) - Detailed Breakdown

Technology:
- MongoDB Atlas: Cloud-hosted MongoDB
- Mongoose ODM: Object Document Mapper
- NoSQL: Document-based database

Data Structure:
// Example character document
{
  "_id": "507f1f77bcf86cd799439011",
  "name": "Fox",
  "weight_class": "light",
  "movement_speed": 10,
  "original_game_series": "Star Fox",
  "icon": "https://example.com/fox-icon.png",
  "image": "https://example.com/fox-image.png",
  "model": "https://example.com/fox-model.glb",
  "tier_ranking": "S",
  "notable_players": ["Leffen", "Mango", "Armada"]
}

🚀 Deployment Architecture

Frontend Deployment (Netlify):
- Platform: Netlify
- URL: https://jade-mandazi-4b4bda.netlify.app
- Build Process: Angular CLI production build
- Features:
  - Automatic deployments
  - CDN distribution
  - HTTPS enabled
  - SPA routing support

Backend Deployment (Render):
- Platform: Render
- URL: https://u05-restful-api.onrender.com
- Features:
  - Automatic deployments
  - Environment variable management
  - Auto-scaling

Database (MongoDB Atlas):
- Platform: MongoDB Atlas
- Features:
  - Cloud-hosted
  - Automatic backups
  - Global distribution
  - Security features

🔄 Data Flow

1. User Interaction: User clicks on character list
2. Frontend Request: Angular service makes HTTP request
3. API Call: Request sent to Render backend
4. Database Query: Express queries MongoDB Atlas
5. Response: Data flows back through the chain
6. UI Update: Angular updates the user interface

🛠️ Development Workflow

Local Development:
1. Backend: cd u05 && npm start (runs on port 4000)
2. Frontend: cd angular-frontend && ng serve (runs on port 4200)
3. Database: MongoDB Atlas (cloud)

Production Deployment:
1. Backend: Auto-deployed to Render on git push
2. Frontend: Deployed to Netlify via CLI
3. Database: MongoDB Atlas (always available)

✨ Key Features Implemented

- Responsive Design: Works on desktop and mobile
- Real-time Updates: Data updates immediately in UI
- Error Handling: Graceful error management
- Form Validation: Input validation and feedback
- RESTful API: Standard HTTP methods and status codes
- Type Safety: TypeScript interfaces and types
- Reactive Programming: RxJS for data streams
- Component Architecture: Modular, reusable components

This project demonstrates modern full-stack development practices with a complete separation of concerns, scalable architecture, and production-ready deployment strategies.

